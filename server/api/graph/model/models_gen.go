// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

// エラーを表す共通の interface。
// エラーを表す type はすべてこの interface を実装する。
type Error interface {
	IsError()
	// エラーの種別を端的に表すフィールド。HTTPステータスのテキストを使う
	GetCode() string
	// エラーの概要を表すフィールド。ユーザに見せて良い
	GetMessage() string
}

// query/mutation の返り値の Result 型はすべてこの interface を実装する。
// ok: true の場合、処理成功のモデル、ok: false の場合はエラーのモデルを返す
type ResultBase interface {
	IsResultBase()
	GetOk() bool
}

type AudioFileNode struct {
	ID              string   `json:"id"`
	FilePath        string   `json:"filePath"`
	FileName        string   `json:"fileName"`
	Artists         []string `json:"artists"`
	AlbumArtist     string   `json:"albumArtist"`
	Album           string   `json:"album"`
	Title           string   `json:"title"`
	Tags            []string `json:"tags"`
	ContainedTracks []string `json:"containedTracks"`
}

// input のフィールドレベルでエラーの詳細を記述する
type ErrorDetail struct {
	// エラーが起きた原因となった input のフィールド名
	FieldName string `json:"fieldName"`
	// fieldName に対するエラーメッセージ。ユーザに見せて良い
	Message string `json:"message"`
}

// inputが配列だった場合にフィールドレベルでエラーの詳細を記述するために使う
type ErrorDetailWithIndex struct {
	// エラーが起きた原因となった input のフィールド名
	FieldName string `json:"fieldName"`
	// fieldName に対するエラーメッセージ。ユーザに見せて良い
	Message string `json:"message"`
	// もとのinputの要素の何番目でエラーが起きたか
	Index int `json:"index"`
}

// Authorization に含まれている JWT から Payload を抜き出せなかったときのエラー。
// 基本的にHasura や API Gateway で JWT のバリデーションがされるので通常運用では起こり得ない
type ErrorUnauthorized struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (ErrorUnauthorized) IsError() {}

// エラーの種別を端的に表すフィールド。HTTPステータスのテキストを使う
func (this ErrorUnauthorized) GetCode() string { return this.Code }

// エラーの概要を表すフィールド。ユーザに見せて良い
func (this ErrorUnauthorized) GetMessage() string { return this.Message }

type QueryInput struct {
	FileName    *string  `json:"fileName,omitempty"`
	Artists     []string `json:"artists,omitempty"`
	AlbumArtist *string  `json:"albumArtist,omitempty"`
	Album       *string  `json:"album,omitempty"`
	Title       *string  `json:"title,omitempty"`
	Tags        []string `json:"tags,omitempty"`
	Tracks      []string `json:"tracks,omitempty"`
}

type SearchInput struct {
	Query  *QueryInput `json:"query"`
	Limit  *int        `json:"limit,omitempty"`
	Offset *int        `json:"offset,omitempty"`
}
