extend type Query {
  audioFileNodes(
    or: AudioFileNodeQueryInput
    and: AudioFileNodeQueryInput
    limit: Int
    offset: Int
  ): [AudioFileNode!]!
  audioCoverArt(filePath: String!): AudioCoverArtResult
}

extend type Mutation {
  indexAudioFiles(rootDir: String!): IndexAudioFilesResult!
}

type IndexAudioFilesResult {
  success: Boolean!
}

input AudioFileNodeQueryInput {
  filePath: String
  fileName: String
  artists: [String!]
  albumArtist: String
  album: String
  title: String
  tags: [String!]
  tracks: [String!]
}

type AudioFileNode {
  id: String!
  filePath: String!
  fileName: String!
  artists: [String!]!
  albumArtist: String!
  album: String!
  title: String!
  tags: [String!]!
  containedTracks: [String!]!
}

union AudioCoverArtResult =
    AudioCoverArtSuccess
  | AudioCoverArtErrorDoesNotHaveCover
  | AudioCoverArtErrorFileDoesNotExist

type AudioCoverArtSuccess {
  base64Img: String!
}

type AudioCoverArtErrorDoesNotHaveCover implements Error {
  code: String!
  message: String!
}

type AudioCoverArtErrorFileDoesNotExist implements Error {
  code: String!
  message: String!
}
